
//-------------------------------------------------------------------
// 
// SG: Summer Graphic ( GL / DirectX / HTML Canvas ):
//
// Simple Example to test only.
//
// ----------------------------------------------
// EVENT MODEL:
//
// typedef struct {
//    void    *target;  // OBJECT or Pointer to "object"
//    int     offsetX;  // mouse x
//    int     offsetY;  // mouse y
//    int     which;    // mouse button: 1 | 3
// }TEvent;
//
// ----------------------------------------------
//
// BY: Francisco - gokernel@hotmail.com
//
//-------------------------------------------------------------------
//
#include "opengl.sg"

var count = 10, buf;

var click = 0;

var x = 0, y = 0, dx = 0, dy = 0, MouseX = 0, MouseY = 0;

var angle_x = 30.0, angle_y = 30.0;


function DrawScene () {

    sgBeginScene();
    sgSet3D(); // set 3D projection mode using OpenGL.

  glPushMatrix();

    //glTranslatef (0.0, -1.5, -10.0); // -- cam up z
    glTranslatef (0.0, 0.0, -3.0);

    //-----------------------------------------
    // rotate the world on mouse click
    //-----------------------------------------
    //
    glRotatef (angle_x, 1.0, 0.0, 0.0);
    glRotatef (angle_y, 0.0, 1.0, 0.0);

    draw_cube(GL_LINE_LOOP); // 2
//    draw_piso();

  glPopMatrix ();

    sgSet2D(); // set 2D projection mode using OpenGL.
    sgDrawText (buf, 100, 100, 64512); // COLOR_ORANGE

    sgEndScene();
//    sgClear ();

}

//-----------------------------------------------
//
// INFO:
//   Implemented only in 64 BITS:
//     .offsetX 
//     .offsetY
//
//-----------------------------------------------
//
function onMouseMove (e) {
    x = e.offsetX;
    y = e.offsetY;

    dx = MouseX - x;
    dy = MouseY - y;

    // Used to set the projection angle ... SEE: draw_scene().
    MouseX = x;
    MouseY = y;

    if (click) {
        angle_x = angle_x - dy;
        angle_y = angle_y - dx;

        sprintf (buf, "Mouse X: %d Y: %d | count: %d", e.offsetX, e.offsetY, count);
        count = count + 1;

        DrawScene();
    }

}

function onMouseDown (e) {
    click = 1;
}

function onMouseUp (e) {
    click = 0;
}


if (sgInit(0,0)) {

    buf = malloc(150);

    sgSetEvent (onMouseMove, "onmousemove");
    sgSetEvent (onMouseDown, "onmousedown");
    sgSetEvent (onMouseUp,   "onmouseup");

    sprintf (buf, "Mouse X: %d Y: %d | count: %d", 100, 100, count);

    DrawScene();

    sgRun (0);
}

